[
  {
    "objectID": "ST558_HW4.html",
    "href": "ST558_HW4.html",
    "title": "ST 558 Homework 4: Reading and Manipulating Data",
    "section": "",
    "text": "If your working directory is myfolder/homework, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nThe path would be ../MyData.csv.\n\n\nWhat are the major benefits of using R projects?\n\n\nAn R project includes a unique working directory, workspace, and folder structure that can easily be shared because all files and subfolders within the project have the same relative path to the main project folder. R projects also allow for different workstreams or analyses to be separated from each other to prevent overlap.\n\n\nWhat is git and what is github?\n\n\nGit is a version control system that allows you to track files in a designated folder called a repository. Github is web-based hosting service that allows for those repositories to be stored remotely.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nThe main differences are that 1) when viewed, tibbles show only the first several rows of data and columns of variables, along with the associated data type for each column, and 2) they are “lazy” in the sense that they are strict about subsetting, etc., so errors can be found earlier in the programming process.\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"),Species),                Petal.Length &lt; 1.55),Species)\n\nThe chain for this sequence of function calls would be as_tibble(iris) |&gt; select(starts_with(\"Petal\"),Species) |&gt; filter(Petal.Length&lt;1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "ST558_HW4.html#task-1-conceptual-questions",
    "href": "ST558_HW4.html#task-1-conceptual-questions",
    "title": "ST 558 Homework 4: Reading and Manipulating Data",
    "section": "",
    "text": "If your working directory is myfolder/homework, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nThe path would be ../MyData.csv.\n\n\nWhat are the major benefits of using R projects?\n\n\nAn R project includes a unique working directory, workspace, and folder structure that can easily be shared because all files and subfolders within the project have the same relative path to the main project folder. R projects also allow for different workstreams or analyses to be separated from each other to prevent overlap.\n\n\nWhat is git and what is github?\n\n\nGit is a version control system that allows you to track files in a designated folder called a repository. Github is web-based hosting service that allows for those repositories to be stored remotely.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nThe main differences are that 1) when viewed, tibbles show only the first several rows of data and columns of variables, along with the associated data type for each column, and 2) they are “lazy” in the sense that they are strict about subsetting, etc., so errors can be found earlier in the programming process.\n\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"),Species),                Petal.Length &lt; 1.55),Species)\n\nThe chain for this sequence of function calls would be as_tibble(iris) |&gt; select(starts_with(\"Petal\"),Species) |&gt; filter(Petal.Length&lt;1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "ST558_HW4.html#task-2-reading-delimited-data",
    "href": "ST558_HW4.html#task-2-reading-delimited-data",
    "title": "ST 558 Homework 4: Reading and Manipulating Data",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass data\n\nThe glass.data data set is a comma-delimited file, so we’ll use the read_csv function to load the data into a tibble:\n\n\nglass &lt;- read_csv(file=\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",col_names=c(\"id\",\"RI\",\"Na\",\"Mg\",\n                  \"Al\",\"Si\",\"K\",\"Ca\",\"Ba\",\"Fe\",\"Type_of_Glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_Glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNext, we’d like to overwrite the numeric variable Type_of_glass with a character string version using the mutate function:\n\n\nglass |&gt; mutate(Type_of_Glass=ifelse(Type_of_Glass == 1, \"building_windows_float_processed\",\n                              ifelse(Type_of_Glass == 2, \"building_windows_non_float_processed\",\n                              ifelse(Type_of_Glass == 3, \"vehicle_windows_float processed\",\n                              ifelse(Type_of_Glass == 4, \"vehicle_windows_non_float_processed\",\n                              ifelse(Type_of_Glass == 5, \"containers\",\n                              ifelse(Type_of_Glass == 6, \"tableware\",\n                              ifelse(Type_of_Glass == 7, \"headlamps\",\"other\"))))))))\n\n# A tibble: 214 × 11\n      id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nFinally, we’ll add to this chain in order to filter the data, keeping only observations having an Fe value less than 0.2:\n\n\nglass |&gt; mutate(Type_of_Glass=ifelse(Type_of_Glass == 1, \"building_windows_float_processed\",\n                              ifelse(Type_of_Glass == 2, \"building_windows_non_float_processed\",\n                              ifelse(Type_of_Glass == 3, \"vehicle_windows_float processed\",\n                              ifelse(Type_of_Glass == 4, \"vehicle_windows_non_float_processed\",\n                              ifelse(Type_of_Glass == 5, \"containers\",\n                              ifelse(Type_of_Glass == 6, \"tableware\",\n                              ifelse(Type_of_Glass == 7, \"headlamps\",\"other\")))))))) |&gt; filter(Fe&lt;0.2)\n\n# A tibble: 189 × 11\n      id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_Glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 7     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 8     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n 9    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n10    12  1.52  12.8  3.66  1.27  73.0  0.6   8.56     0  0    building_windows…\n# ℹ 179 more rows\n\n\n\n\nYeast data\n\nThe yeast data is space-delimited, so we will use read_table to create a tibble:\n\n\nyeast &lt;- read_table(file=\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",col_names=c(\"seq_name\",\"mcg\",\"gvh\",\"alm\",\"mit\",\"erl\",\"pox\",\"vac\",\"nuc\",\"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\n\n\nNext, we’ll remove the seq_name and nuc columns:\n\n\nyeast |&gt; select(!c(seq_name,nuc))\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nFinally, we’ll add columns to summarize the mean and median of each remaining numeric variable, grouped by class:\n\n\nyeast |&gt; select(!c(seq_name,nuc)) |&gt; group_by(class) |&gt; mutate(across(where(is.numeric), list(mean=mean,median=median), .names=\"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  },
  {
    "objectID": "ST558_HW4.html#task-3-combining-excel-and-delimited-data",
    "href": "ST558_HW4.html#task-3-combining-excel-and-delimited-data",
    "title": "ST 558 Homework 4: Reading and Manipulating Data",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\n\nRed and White Wine Data\n\nFirst, we read in the white wine data from the downloaded file located in the repo working directory:\n\n\nwhite_wine &lt;- read_excel(\"white-wine.xlsx\")\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nTo fix the non-standard variable names, we then extract the new names from the second sheet of the Excel workbook and use colnames to change the variable names in the tibble:\n\n\nww_names &lt;- read_excel(\"white-wine.xlsx\",sheet=excel_sheets(\"white-wine.xlsx\")[2])\ncolnames(white_wine) &lt;- as_vector(ww_names)\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nFinally, we’ll add a column called wine_type to indicate that all of these wines are white:\n\n\nwhite_wine_2 &lt;- white_wine |&gt; mutate(wine_type=\"white\")\n\n\nWe’ll now read in the semicolon-delimited red wine data and carry out the same tibble modifications that were done for the white wine data:\n\n\nred_wine &lt;- read_delim(file=\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",delim=\";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncolnames(red_wine) &lt;- as_vector(ww_names)\nred_wine_2 &lt;- red_wine |&gt; mutate(wine_type=\"red\")\nred_wine_2\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\n\nCombined Wine Data\n\nThe two tibbles for the wine data can now be combined into a single tibble using bind_rows:\n\n\ncombined_wine &lt;- bind_rows(white_wine_2,red_wine_2)\n\n\nNext, we’ll create a chain to filter the wine data based on a number of criteria, starting with quality and alcohol content:\n\n\ncombined_wine |&gt; filter(quality &gt; 6.5 & alcohol&lt;132)\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            66             0.16        0.4             1.5     0.044\n 2            66             0.17        0.38            1.5     0.032\n 3            62             0.66        0.48            1.2     0.029\n 4            62             0.66        0.48            1.2     0.029\n 5            64             0.31        0.38            2.9     0.038\n 6            68             0.26        0.42            1.7     0.049\n 7            72             0.32        0.36            2       0.033\n 8            74             0.18        0.31            1.4     0.058\n 9            66             0.25        0.29            1.1     0.068\n10            62             0.16        0.33            1.1     0.057\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nNow we sort the remaining wines by quality:\n\n\ncombined_wine |&gt; filter(quality &gt; 6.5 & alcohol&lt;132) |&gt; arrange(desc(quality))\n\n# A tibble: 1,206 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            91             0.27        0.45           10.6     0.035\n 2            66             0.36        0.29            1.6     0.021\n 3            74             0.24        0.36            2       0.031\n 4            69             0.36        0.34            4.2     0.018\n 5            71             0.26        0.49            2.2     0.032\n 6            62             0.66        0.48            1.2     0.029\n 7            62             0.66        0.48            1.2     0.029\n 8            68             0.26        0.42            1.7     0.049\n 9            67             0.23        0.31            2.1     0.046\n10            67             0.23        0.31            2.1     0.046\n# ℹ 1,196 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nNext, we retain only the variables that contain acid and the variables alcohol,wine_type and quality:\n\n\ncombined_wine |&gt; filter(quality &gt; 6.5 & alcohol&lt;132) |&gt; arrange(desc(quality)) |&gt; select(contains(\"acidity\"),alcohol,wine_type, quality)\n\n# A tibble: 1,206 × 5\n   fixed_acidity volatile_acidity alcohol wine_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1            91             0.27     104 white           9\n 2            66             0.36     124 white           9\n 3            74             0.24     125 white           9\n 4            69             0.36     127 white           9\n 5            71             0.26     129 white           9\n 6            62             0.66     128 white           8\n 7            62             0.66     128 white           8\n 8            68             0.26     105 white           8\n 9            67             0.23     107 white           8\n10            67             0.23     107 white           8\n# ℹ 1,196 more rows\n\n\n\nFinally, we’ll add the mean and standard deviation of the alcohol variable grouped by quality:\n\n\ncombined_wine |&gt; filter(quality &gt; 6.5 & alcohol&lt;132) |&gt; arrange(desc(quality)) |&gt; select(contains(\"acidity\"),alcohol,wine_type, quality) |&gt; group_by(quality) |&gt; mutate(mean_alcohol=mean(alcohol), sd_alcohol=sd(alcohol))\n\n# A tibble: 1,206 × 7\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity alcohol wine_type quality mean_alcohol\n           &lt;dbl&gt;            &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27     104 white           9        122. \n 2            66             0.36     124 white           9        122. \n 3            74             0.24     125 white           9        122. \n 4            69             0.36     127 white           9        122. \n 5            71             0.26     129 white           9        122. \n 6            62             0.66     128 white           8         94.1\n 7            62             0.66     128 white           8         94.1\n 8            68             0.26     105 white           8         94.1\n 9            67             0.23     107 white           8         94.1\n10            67             0.23     107 white           8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: sd_alcohol &lt;dbl&gt;"
  }
]